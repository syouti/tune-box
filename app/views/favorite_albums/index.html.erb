

<div class="collection-container">
  <!-- Google AdSense ヘッダー広告 -->
  <div class="ad-container">
    <ins class="adsbygoogle"
         style="display:block"
         data-ad-client="ca-pub-5685437449602998"
         data-ad-slot="1234567890"
         data-ad-format="auto"
         data-full-width-responsive="true"></ins>
    <script>
         (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
  </div>

  <!-- メインコンテンツエリア -->
  <div class="main-content-area">
    <!-- 左側: コレクションキャンバス -->
    <div class="canvas-section">
      <!-- キャンバスとボタンのコンテナ -->
      <div class="canvas-wrapper">

        <!-- アルバム追加ボタン（右上） -->
   <div class="canvas-top-right-btn">
    <%= link_to albums_index_path, class: "btn btn-primary add-album-btn" do %>
      <i class="fas fa-plus me-2"></i>アルバムを追加
    <% end %>
    <!-- 一括削除ボタンを追加 -->
    <% if @favorite_albums.any? %>
      <button class="btn btn-danger ms-2 bulk-delete-btn" onclick="showBulkDeleteModal()">
        <i class="fas fa-trash me-2"></i>一括削除
      </button>
    <% end %>
  </div>

        <!-- コレクションキャンバス -->
        <div class="collection-canvas" id="canvas">
          <% if @favorite_albums.any? %>
            <% @favorite_albums.each_with_index do |album, index| %>
              <%
                # 🆕 保存された位置を優先、なければデフォルト位置を計算
                if album.position_x.present? && album.position_y.present?
                  # データベースに保存された位置を使用
                  position_x = album.position_x
                  position_y = album.position_y
                  grid_x = (position_x / 140).to_i
                  grid_y = (position_y / 148).to_i
                else
                  # デフォルト位置を計算
                  grid_x = index % 5
                  grid_y = (index / 5).floor
                  position_x = grid_x * 140
                  position_y = grid_y * 148
                end
              %>
              <div class="album-jacket"
                   data-id="<%= album.id %>"
                   data-spotify-id="<%= album.spotify_id %>"
                   data-grid-x="<%= grid_x %>"
                   data-grid-y="<%= grid_y %>"
                   data-album-name="<%= album.name %>"
                   data-artist-name="<%= album.artist %>"
                   style="top: <%= position_y %>px; left: <%= position_x %>px;">
                <img src="<%= album.image_url %>" alt="<%= album.name %>">
                <button class="delete-btn" onclick="removeAlbum(this, '<%= album.spotify_id %>')">
                  <i class="fas fa-times"></i>
                </button>
              </div>
            <% end %>
          <% else %>
            <div class="empty-state">
              <i class="fas fa-compact-disc"></i>
              <h4>まだコレクションがありません</h4>
              <p>検索画面でお気に入りのアルバムジャケットを選んでコレクションに追加しましょう！</p>
              <%= link_to "アルバムを検索", albums_index_path, class: "btn btn-primary mt-3" %>
            </div>
          <% end %>
        </div>

        <!-- プレビューボタン（右下） -->
        <div class="canvas-bottom-right-btn">
          <button class="btn btn-info preview-btn" onclick="previewShareImage()" id="previewBtn">
            <i class="fas fa-eye me-2"></i>プレビュー
          </button>
        </div>
      </div>
    </div>

    <!-- 右側: アルバムリスト -->
    <div class="ranking-section">
  <div class="ranking-container">
    
    
    <div class="album-list" id="albumList">
      <% if @favorite_albums.any? %>
        <% 
          # 位置に基づいてソート（左上から右下へ）
          sorted_albums = @favorite_albums.sort_by do |album|
            if album.position_x.present? && album.position_y.present?
              grid_y = (album.position_y / 148).to_i
              grid_x = (album.position_x / 140).to_i
            else
              # デフォルト位置でソート
              index = @favorite_albums.index(album)
              grid_y = (index / 5).floor
              grid_x = index % 5
            end
            [grid_y, grid_x]  # Y座標優先、次にX座標でソート
          end
        %>
        <% sorted_albums.each_with_index do |album, display_index| %>
          <div class="album-list-item" data-grid-position="<%= display_index %>" data-spotify-id="<%= album.spotify_id %>">
            <span class="album-number"><%= display_index + 1 %></span>
            <span class="album-title"><%= album.name %></span>
            <span class="artist-name"><%= album.artist %></span>
          </div>
        <% end %>
      <% else %>
        <div class="empty-album-list">
          <i class="fas fa-music fa-2x mb-3"></i>
          <p>アルバムを追加するとここに表示されます</p>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- SNS共有モーダル -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title fw-bold" id="shareModalLabel">
          <i class="fas fa-share-alt me-2"></i>名盤リストをSNSに共有
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center">
          <p class="mb-4">あなたの名盤リストを友達にシェアしましょう！</p>
          
          <!-- プレビューセクション -->
          <div class="mb-4 p-3 bg-light rounded">
            <h6 class="fw-bold mb-2">
              <i class="fas fa-eye me-2"></i>プレビューを表示
            </h6>
            <p class="text-muted small mb-3">キャンバスとアルバムリストのプレビューを表示します</p>
            <button class="btn btn-primary btn-lg" onclick="previewShareImage()" id="previewImageBtn">
              <i class="fas fa-eye me-2"></i>プレビュー表示
            </button>
            <div id="previewProgress" class="mt-3" style="display: none;">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">プレビュー生成中...</span>
              </div>
              <p class="mt-2 text-muted">プレビューを生成中です...</p>
            </div>
          </div>

          <!-- プレビュー表示エリア -->
          <div id="previewArea" class="mb-4" style="display: none;">
            <h6 class="fw-bold mb-2">
              <i class="fas fa-image me-2"></i>プレビュー
            </h6>
            <div class="text-center">
              <img id="previewImage" class="img-fluid border rounded" style="max-width: 100%; max-height: 400px;" alt="プレビュー画像">
            </div>
            <div class="mt-3 text-center">
              <button class="btn btn-success btn-lg" onclick="generateShareImage()" id="generateImageBtn">
                <i class="fas fa-download me-2"></i>画像をダウンロード
              </button>
              <button class="btn btn-info btn-lg ms-2" onclick="shareToSNS()" id="shareSNSBtn">
                <i class="fas fa-share-alt me-2"></i>SNSでシェア
              </button>
            </div>
          </div>
          
          <hr class="my-4">
          
          <div class="d-grid gap-3" style="max-width: 400px; margin: 0 auto;">
            <a href="#" class="btn btn-primary btn-lg sns-share-btn" onclick="shareToTwitter()">
              <i class="fab fa-x-twitter me-2"></i>X (Twitter) でシェア
            </a>
            <a href="#" class="btn btn-danger btn-lg sns-share-btn" onclick="shareToInstagram()">
              <i class="fab fa-instagram me-2"></i>Instagram でシェア
            </a>
            <a href="#" class="btn btn-success btn-lg sns-share-btn" onclick="shareToLine()">
              <i class="fab fa-line me-2"></i>LINE でシェア
            </a>
            <button class="btn btn-secondary btn-lg" onclick="copyLink()">
              <i class="fas fa-link me-2"></i>リンクをコピー
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



<!-- 一括削除確認モーダル -->
<div class="modal fade" id="bulkDeleteModal" tabindex="-1" aria-labelledby="bulkDeleteModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title fw-bold" id="bulkDeleteModalLabel">
          <i class="fas fa-exclamation-triangle me-2"></i>一括削除の確認
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center">
          <div class="mb-4">
            <i class="fas fa-trash fa-3x text-danger mb-3"></i>
            <h6 class="fw-bold">全てのアルバムを削除しますか？</h6>
            <p class="text-muted">現在 <span id="album-count"><%= @favorite_albums.count %></span> 枚のアルバムがコレクションにあります。</p>
            <div class="alert alert-warning">
              <i class="fas fa-exclamation-triangle me-2"></i>
              <strong>この操作は取り消せません！</strong>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-2"></i>いいえ
        </button>
        <button type="button" class="btn btn-danger" onclick="executeBulkDelete()">
          <i class="fas fa-trash me-2"></i>はい
        </button>
      </div>
    </div>
  </div>
</div>

<style>
.collection-container {
  background: rgba(0, 0, 0, 0.95);
  border-radius: 20px;
  padding: 20px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.1);
  min-height: calc(100vh - 140px);
  position: relative;
}

.main-content-area {
  display: flex;
  gap: 30px;
  align-items: flex-start;
}

.canvas-section {
  flex: 0 0 auto;
  position: relative;
}

.canvas-wrapper {
  position: relative;
  display: inline-block;
}

/* ボタン配置 */
.canvas-top-right-btn {
  position: absolute;
  top: -60px;
  right: 0;
  z-index: 10;
}

.canvas-bottom-right-btn {
  position: absolute;
  bottom: -60px;
  right: 0;
  z-index: 10;
}

.add-album-btn {
  background: linear-gradient(135deg, #667eea, #764ba2);
  border: none;
  color: white;
  padding: 12px 20px;
  border-radius: 25px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  text-decoration: none;
}

.add-album-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
  color: white;
  text-decoration: none;
}

.share-sns-btn {
  background: linear-gradient(135deg, #28a745, #20c997);
  border: none;
  color: white;
  padding: 12px 20px;
  border-radius: 25px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
}

.share-sns-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
  color: white;
}

/* キャンバス */
.collection-canvas {
  width: 700px;
  height: 742px;
  background-color: #000000;
  background-image:
      linear-gradient(rgba(255,255,255,0.2) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255,255,255,0.2) 1px, transparent 1px);
  background-size: 140px 148px;
  position: relative;
  border: 2px solid #333;
  border-radius: 15px;
  overflow: hidden;
}

.album-jacket {
  position: absolute !important;
  width: 140px !important;
  height: 148px !important;
  cursor: move;
  border-radius: 0 !important;
  box-shadow: inset 0 0 0 1px rgba(255,255,255,0.1);
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  background: transparent !important;
  padding: 0 !important;
  margin: 0 !important;
  user-select: none;
  border: 1px solid rgba(255,255,255,0.2);
  overflow: hidden !important;
}

.album-jacket img {
  width: 100% !important;
  height: 100% !important;
  object-fit: cover !important;
  border-radius: 0 !important;
  display: block !important;
  object-position: center !important;
}

.album-jacket:hover {
  transform: scale(1.05) translateY(-5px);
  box-shadow: 0 15px 35px rgba(255,255,255,0.4);
  z-index: 100;
}

.album-jacket.hover-linked {
  transform: scale(1.05) translateY(-5px);
  box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
  z-index: 100;
  border: 2px solid #667eea;
}

.album-jacket.dragging {
  transform: rotate(5deg) scale(1.1);
  box-shadow: 0 15px 35px rgba(0,0,0,0.4);
  z-index: 1000;
}

.delete-btn {
  position: absolute;
  top: 5px;
  right: 5px;
  width: 24px;
  height: 24px;
  background: rgba(220, 53, 69, 0.9);
  color: white;
  border: none;
  border-radius: 50%;
  font-size: 12px;
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 101;
}

.album-jacket:hover .delete-btn {
  opacity: 1;
}

.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: #ffffff;
}

.empty-state i {
  font-size: 4rem;
  margin-bottom: 20px;
  opacity: 0.5;
  color: #ffffff;
}

/* 右側アルバムリスト - 番号付きダークテーマ */
.ranking-section {
  flex: 1;
  min-width: 400px;
  max-width: 500px;
}

.ranking-container {
  background: #000000; /* 黒背景 */
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.3); /* シャドウを強化 */
  height: 742px;
  display: flex;
  flex-direction: column;
  position: sticky;
  top: 20px;
  border: 1px solid #333; /* 薄いボーダーを追加 */
}

.ranking-header {
  flex: 0 0 auto;
  border-bottom: 2px solid #333; /* ダークグレーのボーダー */
  padding-bottom: 15px;
  margin-bottom: 15px;
  color: #ffffff; /* 白文字 */
}

.album-list {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 3px;
  overflow: hidden;
  height: 100%;
}

.album-list-item {
  display: flex;
  align-items: center;
  padding: 8px 12px;
  background: #1a1a1a;
  border-radius: 6px;
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  border: 1px solid #333;
  height: calc((100% - 72px) / 25);
  min-height: 20px;
  white-space: nowrap;
  gap: 8px; /* 🆕 要素間のスペースを少し縮小 */
}

.album-list-item:hover {
  background: #2a2a2a; /* ホバー時により明るいグレー */
  transform: translateX(5px) translateY(-2px);
  box-shadow: 0 5px 15px rgba(255,255,255,0.1); /* 白いシャドウ */
  border-color: #555; /* ホバー時のボーダー */
}

.album-list-item.hover-linked {
  background: rgba(102, 126, 234, 0.2); /* 青の透明度を上げる */
  border-color: #667eea;
  transform: translateX(5px) translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.album-list-item.highlighted {
  background: rgba(102, 126, 234, 0.3); /* ハイライト時 */
  border-color: #667eea;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.5);
  transform: translateX(10px) translateY(-5px);
}

/* 🆕 番号のスタイル */
.album-number {
  font-weight: 700;
  font-size: 14px;
  color: #667eea;
  min-width: 24px;
  text-align: center;
  flex-shrink: 0;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid rgba(102, 126, 234, 0.3);
}

.album-title {
  font-weight: 600;
  font-size: 12px;
  color: #ffffff;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  flex: 1; /* 🆕 利用可能スペースを使用 */
  text-align: left;
  min-width: 0; /* 🆕 縮小を許可 */
  margin-right: 8px; /* 🆕 右マージンを縮小 */
}

.artist-name {
  font-size: 10px;
  color: #cccccc;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  flex: 0 0 auto; /* 🆕 固定サイズ */
  max-width: 150px; /* 🆕 最大幅を拡大 */
  min-width: 80px; /* 🆕 最小幅を確保 */
  text-align: right;
}
.empty-album-list {
  display: flex !important;
  flex-direction: column !important;
  align-items: center !important;
  justify-content: center !important;
  height: 100% !important;
  text-align: center !important;
  color: white !important;
  padding: 40px 20px !important;
}

.empty-album-list i {
  color: white !important;
  margin-bottom: 15px !important;
}

.empty-album-list p {
  color: white !important;
  margin: 0 !important;
  font-size: 14px !important;
}


/* ヘッダーがある場合のスタイル */
.ranking-header h3,
.ranking-header h4,
.ranking-header h5 {
  color: #ffffff;
  margin: 0;
}

/* スクロールバーのカスタマイズ（Webkit系ブラウザ） */
.album-list::-webkit-scrollbar {
  width: 6px;
}

.album-list::-webkit-scrollbar-track {
  background: #1a1a1a;
  border-radius: 3px;
}

.album-list::-webkit-scrollbar-thumb {
  background: #555;
  border-radius: 3px;
}

.album-list::-webkit-scrollbar-thumb:hover {
  background: #777;
}

/* 🆕 ホバー時の番号のスタイル */
.album-list-item:hover .album-number {
  background: rgba(102, 126, 234, 0.2);
  border-color: rgba(102, 126, 234, 0.5);
  color: #8fa4f3;
}

.album-list-item.hover-linked .album-number,
.album-list-item.highlighted .album-number {
  background: rgba(102, 126, 234, 0.4);
  border-color: #667eea;
  color: #ffffff;
}
/* モーダル */
.modal-content {
  border-radius: 20px;
  border: none;
  box-shadow: 0 20px 40px rgba(0,0,0,0.1);
}

.modal-header {
  border-bottom: 1px solid #eee;
  background: linear-gradient(135deg,rgb(255, 255, 255), #e9ecef);
  border-radius: 20px 20px 0 0;
}

.sns-share-btn {
  transition: all 0.3s ease;
}

.sns-share-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 20px rgba(0,0,0,0.2);
}

/* レスポンシブ */
@media (max-width: 1200px) {
  .main-content-area {
    flex-direction: column;
  }
  
  .ranking-section {
    max-width: none;
    width: 100%;
  }
  
  .canvas-top-right-btn {
    position: static;
    margin-bottom: 20px;
    text-align: right;
  }
  
  .canvas-bottom-right-btn {
    position: static;
    margin-top: 20px;
    text-align: right;
  }
  
  .ranking-container {
    height: auto;
    max-height: 500px;
    position: relative;
  }
  
  .album-list {
    overflow-y: auto;
  }
}

@media (max-width: 768px) {
  .canvas-top-right-btn,
  .canvas-bottom-right-btn {
    text-align: center;
  }
  
  .add-album-btn,
  .share-sns-btn {
    width: 100%;
    max-width: 250px;
  }
}

/* 一括削除ボタン */
.bulk-delete-btn {
  background: linear-gradient(135deg, #dc3545, #c82333);
  border: none;
  color: white;
  padding: 12px 20px;
  border-radius: 25px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
}

.bulk-delete-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(220, 53, 69, 0.4);
  color: white;
}

.bulk-delete-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* 削除中のアニメーション */
.album-jacket.deleting {
  animation: deleteAnimation 0.5s ease-out forwards;
}

@keyframes deleteAnimation {
  0% {
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }
  50% {
    opacity: 0.5;
    transform: scale(1.1) rotate(180deg);
  }
  100% {
    opacity: 0;
    transform: scale(0) rotate(360deg);
  }
}

/* プログレスバー */
.bulk-delete-progress {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 9999;
  background: white;
  padding: 30px;
  border-radius: 15px;
  box-shadow: 0 10px 40px rgba(0,0,0,0.3);
  text-align: center;
  min-width: 300px;
}

.album-jacket.collision-preview {
  border: 2px dashed #ffc107 !important;
  background-color: rgba(255, 193, 7, 0.1) !important;
  transform: scale(1.02) !important;
  transition: all 0.2s ease !important;
}

.album-jacket.dragging {
  transform: rotate(5deg) scale(1.1) !important;
  box-shadow: 0 15px 35px rgba(0,0,0,0.4) !important;
  z-index: 1000 !important;
  border: 2px solid #667eea !important;
  transition: none !important;
}

/* ドラッグ中のキャンバス状態 */
.collection-canvas.dragging-active {
  cursor: grabbing !important;
}

.collection-canvas.dragging-active .album-jacket:not(.dragging) {
  pointer-events: none;
  opacity: 0.7;
}

/* より明確な視覚的フィードバック */
.album-jacket.dragging {
  box-shadow: 
    0 15px 35px rgba(0,0,0,0.4),
    0 0 0 3px rgba(102, 126, 234, 0.3) !important;
}


</style>


<script>
  
// コレクションページ専用JavaScript
let isDragging = false;
let currentElement = null;
let startX = 0;
let startY = 0;
let selectedAlbum = null;
let occupiedPositions = new Map();
let saveTimeout = null;
let dragOffset = { x: 0, y: 0 };

document.addEventListener('DOMContentLoaded', function() {
  console.log('🔧 Initializing collection page...');
  
  // Google Analytics ページビュートラッキング
  if (typeof Analytics !== 'undefined') {
    Analytics.trackPageView('Collection Canvas');
  }
  
  checkCSRFToken();
  migrateExistingPositions(); // 既存位置データの移行
  updateOccupiedPositions();
  initializeDragAndDrop();
  updateAlbumList();
  initializeHoverLinks();
});

// 既存の位置データを新しい計算方法に移行
function migrateExistingPositions() {
  console.log('🔄 Migrating existing positions to new grid system...');
  
  const albums = document.querySelectorAll('.album-jacket');
  let migratedCount = 0;
  
  albums.forEach(album => {
    const currentTop = parseInt(album.style.top) || 0;
    const currentLeft = parseInt(album.style.left) || 0;
    
    // 古い140px計算で保存された位置を検出
    if (currentTop % 140 === 0 && currentTop < 700) {
      const oldGridY = currentTop / 140;
      const newTop = oldGridY * 148;
      
      // 位置を更新
      album.style.top = newTop + 'px';
      
      // データ属性も更新
      const gridY = Math.round(newTop / 148);
      album.dataset.gridY = gridY;
      
      console.log(`🔄 Migrated album "${album.dataset.albumName}": ${currentTop}px → ${newTop}px (gridY: ${gridY})`);
      migratedCount++;
    }
  });
  
  console.log(`✅ Position migration completed: ${migratedCount} albums migrated`);
}

// CSRF トークンの状態確認
function checkCSRFToken() {
  const token = document.querySelector('[name="csrf-token"]')?.getAttribute('content') || 
               document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
  
  console.log('🔐 CSRF Token check:', {
    found: !!token,
    length: token?.length,
    preview: token?.substring(0, 10) + '...'
  });
  
  return token;
}

// ホバー連動機能を初期化
function initializeHoverLinks() {
  const albums = document.querySelectorAll('.album-jacket');
  const listItems = document.querySelectorAll('.album-list-item');
  
  albums.forEach(album => {
    album.addEventListener('mouseenter', function() {
      if (!isDragging) {
        const spotifyId = this.dataset.spotifyId;
        linkHover(spotifyId, true);
      }
    });
    
    album.addEventListener('mouseleave', function() {
      if (!isDragging) {
        const spotifyId = this.dataset.spotifyId;
        linkHover(spotifyId, false);
      }
    });
  });
  
  listItems.forEach(item => {
    item.addEventListener('mouseenter', function() {
      const spotifyId = this.dataset.spotifyId;
      linkHover(spotifyId, true);
    });
    
    item.addEventListener('mouseleave', function() {
      const spotifyId = this.dataset.spotifyId;
      linkHover(spotifyId, false);
    });
  });
}

// ホバー連動関数
function linkHover(spotifyId, isHover) {
  const albumElement = document.querySelector(`.album-jacket[data-spotify-id="${spotifyId}"]`);
  const listElement = document.querySelector(`.album-list-item[data-spotify-id="${spotifyId}"]`);
  
  if (isHover) {
    if (albumElement) albumElement.classList.add('hover-linked');
    if (listElement) listElement.classList.add('hover-linked');
  } else {
    if (albumElement) albumElement.classList.remove('hover-linked');
    if (listElement) listElement.classList.remove('hover-linked');
  }
}

// ドラッグ&ドロップ初期化
function initializeDragAndDrop() {
  const albums = document.querySelectorAll('.album-jacket');
  const canvas = document.getElementById('canvas');

  albums.forEach(album => {
    album.addEventListener('mousedown', function(e) {
      if (e.target.classList.contains('delete-btn') || e.target.closest('.delete-btn')) {
        return;
      }

      isDragging = true;
      currentElement = this;
      canvas.classList.add('dragging-active');

      albums.forEach(a => a.classList.remove('selected', 'hover-linked'));
      this.classList.add('dragging');
      selectedAlbum = this;

      const rect = this.getBoundingClientRect();
      const canvasRect = canvas.getBoundingClientRect();
      
      dragOffset.x = e.clientX - rect.left;
      dragOffset.y = e.clientY - rect.top;

      const currentGridX = parseInt(this.dataset.gridX);
      const currentGridY = parseInt(this.dataset.gridY);
      
      this.dataset.originalGridX = currentGridX;
      this.dataset.originalGridY = currentGridY;
      
      const currentPosKey = `${currentGridX},${currentGridY}`;
      if (occupiedPositions.has(currentPosKey)) {
        occupiedPositions.delete(currentPosKey);
        console.log(`🔄 Temporarily removed position: ${currentPosKey}`);
      }

      this.style.zIndex = '1000';
      
      e.preventDefault();
    });
  });

  document.addEventListener('mousemove', function(e) {
    if (!isDragging || !currentElement) return;

    const canvasRect = canvas.getBoundingClientRect();
    
    const newX = e.clientX - canvasRect.left - dragOffset.x;
    const newY = e.clientY - canvasRect.top - dragOffset.y;

    const boundedX = Math.max(0, Math.min(560, newX));
    const boundedY = Math.max(0, Math.min(592, newY));

    const gridX = Math.round(boundedX / 140);
    const gridY = Math.round(boundedY / 148);
    
    const clampedGridX = Math.max(0, Math.min(4, gridX));
    const clampedGridY = Math.max(0, Math.min(4, gridY));
    
    const snapX = clampedGridX * 140;
    const snapY = clampedGridY * 148;
    
    currentElement.style.left = snapX + 'px';
    currentElement.style.top = snapY + 'px';
    currentElement.dataset.gridX = clampedGridX;
    currentElement.dataset.gridY = clampedGridY;

    const targetAlbum = findAlbumAtPosition(clampedGridX, clampedGridY, currentElement);
    if (targetAlbum) {
      targetAlbum.classList.add('collision-preview');
    } else {
      document.querySelectorAll('.collision-preview').forEach(el => {
        el.classList.remove('collision-preview');
      });
    }
  });

  document.addEventListener('mouseup', function() {
    if (!currentElement) return;

    currentElement.classList.remove('dragging');
    currentElement.style.zIndex = '';
    canvas.classList.remove('dragging-active');
    
    document.querySelectorAll('.collision-preview').forEach(el => {
      el.classList.remove('collision-preview');
    });
    
    const newGridX = parseInt(currentElement.dataset.gridX);
    const newGridY = parseInt(currentElement.dataset.gridY);
    const originalGridX = parseInt(currentElement.dataset.originalGridX);
    const originalGridY = parseInt(currentElement.dataset.originalGridY);
    
    console.log('🎯 Drop detected:', {
      album: currentElement.dataset.albumName,
      from: `${originalGridX},${originalGridY}`,
      to: `${newGridX},${newGridY}`,
      moved: originalGridX !== newGridX || originalGridY !== newGridY
    });
    
    if (originalGridX !== newGridX || originalGridY !== newGridY) {
      const targetAlbum = findAlbumAtPosition(newGridX, newGridY, currentElement);
      
      if (targetAlbum) {
        console.log('🔄 Executing album swap...');
        executeAlbumSwap(currentElement, targetAlbum, originalGridX, originalGridY);
      } else {
        console.log('📍 Moving to empty position...');
        moveToEmptyPosition(currentElement);
      }
    } else {
      console.log('📍 No position change, restoring original position...');
      occupiedPositions.set(`${originalGridX},${originalGridY}`, {
        albumId: currentElement.dataset.id,
        albumName: currentElement.dataset.albumName
      });
    }
    
    delete currentElement.dataset.originalGridX;
    delete currentElement.dataset.originalGridY;
    
    currentElement = null;
    isDragging = false;
    
    setTimeout(() => {
      updateAlbumList();
      initializeHoverLinks();
    }, 150);
  });
}

// アルバム交換処理
function executeAlbumSwap(movingAlbum, targetAlbum, originalGridX, originalGridY) {
  targetAlbum.style.left = (originalGridX * 140) + 'px';
  targetAlbum.style.top = (originalGridY * 148) + 'px';
  targetAlbum.dataset.gridX = originalGridX;
  targetAlbum.dataset.gridY = originalGridY;
  
  const newPos = `${movingAlbum.dataset.gridX},${movingAlbum.dataset.gridY}`;
  const originalPos = `${originalGridX},${originalGridY}`;
  
  occupiedPositions.set(newPos, {
    albumId: movingAlbum.dataset.id,
    albumName: movingAlbum.dataset.albumName
  });
  
  occupiedPositions.set(originalPos, {
    albumId: targetAlbum.dataset.id,
    albumName: targetAlbum.dataset.albumName
  });
  
  console.log('🔄 Swap completed:', {
    moving: `${movingAlbum.dataset.albumName} → ${newPos}`,
    target: `${targetAlbum.dataset.albumName} → ${originalPos}`
  });
  
  saveBothAlbumPositions(movingAlbum, targetAlbum);
}

// 空の位置への移動処理
function moveToEmptyPosition(album) {
  const newPos = `${album.dataset.gridX},${album.dataset.gridY}`;
  
  occupiedPositions.set(newPos, {
    albumId: album.dataset.id,
    albumName: album.dataset.albumName
  });
  
  console.log('📍 Moved to empty position:', {
    album: album.dataset.albumName,
    position: newPos
  });
  
  saveAlbumPosition(album);
}

// 指定された位置にあるアルバムを見つける関数
function findAlbumAtPosition(gridX, gridY, excludeAlbum = null) {
  const positionKey = `${gridX},${gridY}`;
  
  if (occupiedPositions.has(positionKey)) {
    const occupant = occupiedPositions.get(positionKey);
    console.log(`🎯 Position ${positionKey} is occupied by:`, occupant);
  }
  
  const albums = document.querySelectorAll('.album-jacket');
  for (let album of albums) {
    if (album === excludeAlbum) continue;
    
    const albumGridX = parseInt(album.dataset.gridX);
    const albumGridY = parseInt(album.dataset.gridY);
    
    if (albumGridX === gridX && albumGridY === gridY) {
      console.log(`🎯 Found album at position ${gridX},${gridY}:`, album.dataset.albumName);
      return album;
    }
  }
  
  return null;
}

// 両方のアルバムの位置を同時に保存する関数
function saveBothAlbumPositions(album1, album2) {
  const layoutData = [
    {
      id: album1.dataset.id,
      x: parseInt(album1.style.left),
      y: parseInt(album1.style.top),
      grid_x: parseInt(album1.dataset.gridX),
      grid_y: parseInt(album1.dataset.gridY)
    },
    {
      id: album2.dataset.id,
      x: parseInt(album2.style.left),
      y: parseInt(album2.style.top),
      grid_x: parseInt(album2.dataset.gridX),
      grid_y: parseInt(album2.dataset.gridY)
    }
  ];
  
  console.log('🔄 Saving positions for both albums:', {
    album1: {
      id: album1.dataset.id,
      name: album1.dataset.albumName,
      position: layoutData[0]
    },
    album2: {
      id: album2.dataset.id,
      name: album2.dataset.albumName,
      position: layoutData[1]
    }
  });
  
  performPositionSave(layoutData, [album1, album2]);
}

// 位置保存機能（単一アルバム用）
function saveAlbumPosition(albumElement) {
  const albumId = albumElement.dataset.id;
  const positionX = parseInt(albumElement.style.left);
  const positionY = parseInt(albumElement.style.top);
  const gridX = parseInt(albumElement.dataset.gridX);
  const gridY = parseInt(albumElement.dataset.gridY);
  
  if (!albumId || isNaN(positionX) || isNaN(positionY) || isNaN(gridX) || isNaN(gridY)) {
    console.error('❌ Invalid data for position save:', {
      albumId, positionX, positionY, gridX, gridY
    });
    showMessage('位置データが無効です', 'error');
    return;
  }
  
  console.log(`💾 Saving position for album ${albumId}:`, {
    id: albumId,
    name: albumElement.dataset.albumName,
    pixel: { x: positionX, y: positionY },
    grid: { x: gridX, y: gridY }
  });
  
  if (saveTimeout) {
    clearTimeout(saveTimeout);
  }
  
  saveTimeout = setTimeout(() => {
    const layoutData = [{
      id: albumId,
      x: positionX,
      y: positionY,
      grid_x: gridX,
      grid_y: gridY
    }];
    
    performPositionSave(layoutData, [albumElement]);
  }, 100);
}

// 実際の保存処理を共通化
function performPositionSave(layoutData, albumElements) {
  const csrfToken = document.querySelector('[name="csrf-token"]')?.getAttribute('content') || 
                   document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
  
  if (!csrfToken) {
    console.error('❌ CSRF token not found');
    showMessage('セキュリティトークンが見つかりません', 'error');
    return;
  }
  
  console.log('📤 Sending position update:', layoutData);
  
  fetch('/favorite_albums/update_layout', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
      'Accept': 'application/json'
    },
    body: JSON.stringify({ layout: layoutData })
  })
  .then(response => {
    console.log('📥 Response status:', response.status);
    
    if (!response.ok) {
      return response.text().then(text => {
        console.error('❌ Server response:', text);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      });
    }
    return response.json();
  })
  .then(data => {
    console.log('✅ Position save response:', data);
    
    if (data.status === 'success') {
      console.log('💾 Positions saved successfully');
      albumElements.forEach(element => showTemporaryIndicator(element));
    } else {
      console.error('❌ Server error:', data.message);
      showMessage('位置の保存に失敗しました: ' + data.message, 'error');
    }
  })
  .catch(error => {
    console.error('❌ Position save error:', error);
    showMessage('位置保存中にエラーが発生しました: ' + error.message, 'error');
    
    albumElements.forEach(element => {
      if (element.dataset.originalGridX && element.dataset.originalGridY) {
        const originalX = parseInt(element.dataset.originalGridX) * 140;
        const originalY = parseInt(element.dataset.originalGridY) * 148;
        element.style.left = originalX + 'px';
        element.style.top = originalY + 'px';
        element.dataset.gridX = element.dataset.originalGridX;
        element.dataset.gridY = element.dataset.originalGridY;
      }
    });
    updateOccupiedPositions();
  });
}

// 位置保存の視覚的フィードバック
function showTemporaryIndicator(albumElement) {
  const indicator = document.createElement('div');
  indicator.innerHTML = '<i class="fas fa-save"></i>';
  indicator.style.cssText = `
    position: absolute;
    top: 5px;
    left: 5px;
    width: 20px;
    height: 20px;
    background: rgba(40, 167, 69, 0.8);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    z-index: 102;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  `;
  
  setTimeout(() => indicator.style.opacity = '1', 50);
  
  setTimeout(() => {
    indicator.style.opacity = '0';
    setTimeout(() => {
      if (indicator.parentNode) {
        indicator.parentNode.removeChild(indicator);
      }
    }, 300);
  }, 1500);
}

// 占有位置更新
function updateOccupiedPositions() {
  occupiedPositions.clear();
  const positionData = [];
  const duplicateCheck = new Set();
  
  document.querySelectorAll('.album-jacket').forEach(album => {
    const gridX = parseInt(album.dataset.gridX);
    const gridY = parseInt(album.dataset.gridY);
    
    if (isNaN(gridX) || isNaN(gridY)) {
      console.warn(`⚠️ Invalid coordinates for album ${album.dataset.albumName}:`, {
        gridX, gridY, 
        styleLeft: album.style.left, 
        styleTop: album.style.top
      });
      
      const styleX = parseInt(album.style.left) || 0;
      const styleY = parseInt(album.style.top) || 0;
      const correctedGridX = Math.round(styleX / 140);
      const correctedGridY = Math.round(styleY / 148);
      
      album.dataset.gridX = correctedGridX;
      album.dataset.gridY = correctedGridY;
      
      console.log(`🔧 Corrected coordinates:`, { 
        gridX: correctedGridX, 
        gridY: correctedGridY 
      });
    }
    
    let posKey = `${album.dataset.gridX},${album.dataset.gridY}`;
    
    // 重複チェックと自動修正
    if (duplicateCheck.has(posKey)) {
      console.error(`❌ DUPLICATE POSITION DETECTED: ${posKey}`, {
        album: album.dataset.albumName,
        id: album.dataset.id
      });
      
      // 新しい位置を見つける
      let newPosition;
      let attempts = 0;
      do {
        newPosition = findEmptyPosition();
        posKey = `${newPosition.gridX},${newPosition.gridY}`;
        attempts++;
      } while (duplicateCheck.has(posKey) && attempts < 50);
      
      // アルバムの位置を更新
      album.style.left = newPosition.x + 'px';
      album.style.top = newPosition.y + 'px';
      album.dataset.gridX = newPosition.gridX;
      album.dataset.gridY = newPosition.gridY;
      
      console.log(`🔧 Auto-corrected to:`, newPosition);
    }
    
    duplicateCheck.add(posKey);
    
    occupiedPositions.set(posKey, {
      albumId: album.dataset.id,
      albumName: album.dataset.albumName,
      element: album
    });
    
    positionData.push({
      name: album.dataset.albumName,
      id: album.dataset.id,
      gridPos: posKey,
      coordinates: { x: album.style.left, y: album.style.top }
    });
  });
  
  console.log('🗺️ Updated position map:', {
    totalPositions: occupiedPositions.size,
    positions: Array.from(occupiedPositions.keys()),
    details: positionData
  });
}

// 空いている位置を見つける関数
function findEmptyPosition() {
  // より広い範囲で空いている位置を探す
  for (let y = 0; y < 10; y++) {
    for (let x = 0; x < 10; x++) {
      const posKey = `${x},${y}`;
      if (!occupiedPositions.has(posKey)) {
        return {
          x: x * 140,
          y: y * 148,
          gridX: x,
          gridY: y
        };
      }
    }
  }
  
  // それでも見つからない場合は、ランダムな位置を生成
  const randomX = Math.floor(Math.random() * 5);
  const randomY = Math.floor(Math.random() * 5);
  console.warn(`⚠️ No empty positions available, using random position: (${randomX},${randomY})`);
  return { 
    x: randomX * 140, 
    y: randomY * 148, 
    gridX: randomX, 
    gridY: randomY 
  };
}

// アルバムリスト更新
function updateAlbumList() {
  const albums = Array.from(document.querySelectorAll('.album-jacket'));
  const albumList = document.getElementById('albumList');
  
  if (albums.length === 0) {
    albumList.innerHTML = `
      <div class="empty-album-list">
        <i class="fas fa-music fa-2x mb-3"></i>
        <p>アルバムを追加するとここに表示されます</p>
      </div>
    `;
    return;
  }
  
  albums.sort((a, b) => {
    const aGridY = parseInt(a.dataset.gridY);
    const bGridY = parseInt(b.dataset.gridY);
    const aGridX = parseInt(a.dataset.gridX);
    const bGridX = parseInt(b.dataset.gridX);
    
    if (aGridY !== bGridY) {
      return aGridY - bGridY;
    }
    return aGridX - bGridX;
  });
  
  let albumHTML = '';
  albums.forEach((album, index) => {
    const albumName = album.dataset.albumName || '不明なアルバム';
    const artistName = album.dataset.artistName || '不明なアーティスト';
    const spotifyId = album.dataset.spotifyId;
    
    albumHTML += `
      <div class="album-list-item" data-grid-position="${index}" data-spotify-id="${spotifyId}">
        <span class="album-number">${index + 1}</span>
        <span class="album-title">${albumName}</span>
        <span class="artist-name">${artistName}</span>
      </div>
    `;
  });
  
  albumList.innerHTML = albumHTML;
}

// 削除機能
function removeAlbum(btn, spotifyId) {
  if (confirm('このアルバムをコレクションから削除しますか？')) {
    const album = btn.closest('.album-jacket');
    const gridX = parseInt(album.dataset.gridX);
    const gridY = parseInt(album.dataset.gridY);
    
    occupiedPositions.delete(`${gridX},${gridY}`);
    
    fetch(`/favorite_albums/${spotifyId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => {
      console.log('📥 Delete response status:', response.status);
      
      if (!response.ok) {
        return response.text().then(text => {
          console.error('❌ Server response:', text);
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        });
      }
      return response.json();
    })
    .then(data => {
      if (data.status === 'removed') {
        album.style.opacity = '0';
        album.style.transform = 'scale(0)';
        setTimeout(() => {
          album.remove();
          updateAlbumList();
          initializeHoverLinks();
        }, 300);
        showMessage('アルバムを削除しました', 'success');
      } else {
        console.error('❌ Unexpected response:', data);
        showMessage('削除に失敗しました: ' + (data.message || '不明なエラー'), 'error');
      }
    })
    .catch(error => {
      console.error('❌ Remove error:', error);
      showMessage('削除中にエラーが発生しました: ' + error.message, 'error');
      
      // 位置情報を復元
      occupiedPositions.set(`${gridX},${gridY}`, {
        albumId: album.dataset.id,
        albumName: album.dataset.albumName
      });
    });
  }
}

// シェアテキスト生成関数
function generateShareText() {
  const albums = document.querySelectorAll('.album-jacket');
  const albumCount = albums.length;
  
  if (albumCount === 0) {
    return "TuneBoxで名盤リストを作成中！ #TuneBox #名盤リスト #音楽";
  }
  
  // アルバム名を取得（最大3つまで）
  const albumNames = [];
  albums.forEach((album, index) => {
    if (index < 3) {
      const albumName = album.dataset.albumName;
      if (albumName) {
        albumNames.push(albumName);
      }
    }
  });
  
  let text = "TuneBoxで作成した名盤リスト：";
  if (albumNames.length > 0) {
    text += albumNames.join("、");
    if (albumCount > 3) {
      text += ` 他${albumCount - 3}枚`;
    }
  } else {
    text += `${albumCount}枚のアルバム`;
  }
  
  text += " #TuneBox #名盤リスト #音楽";
  
  return text;
}

// SNS共有機能
function shareToTwitter() {
  const text = generateShareText();
  const url = window.location.href;
  const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
  window.open(twitterUrl, '_blank', 'width=600,height=400');
}

function shareToInstagram() {
  const text = generateShareText() + "\n\n" + window.location.href;
  
  if (navigator.userAgent.includes('Mobile')) {
    window.open('instagram://app', '_blank');
  } else {
    navigator.clipboard.writeText(text).then(() => {
      alert('投稿テキストをクリップボードにコピーしました！Instagramで投稿してください。');
    });
  }
}

function shareToLine() {
  const text = generateShareText();
  const url = window.location.href;
  const lineUrl = `https://line.me/R/msg/text/?${encodeURIComponent(text + '\n' + url)}`;
  window.open(lineUrl, '_blank');
}

function copyLink() {
  navigator.clipboard.writeText(window.location.href).then(() => {
    const btn = document.querySelector('.btn-secondary');
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-check me-2"></i>コピー完了！';
    setTimeout(() => {
      btn.innerHTML = originalText;
    }, 2000);
  }).catch(() => {
    alert('リンクのコピーに失敗しました');
  });
}

            // プレビュー機能
            function previewShareImage() {
              const previewBtn = document.getElementById('previewBtn');

              // ボタンを無効化
              previewBtn.disabled = true;
              previewBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>生成中...';

              // 現在のページのキャンバスとアルバムリストをそのままモーダルで表示
              showPreviewModal();
              
              // ボタンを元に戻す
              previewBtn.disabled = false;
              previewBtn.innerHTML = '<i class="fas fa-eye me-2"></i>プレビュー';
            }

            // プレビューモーダルを表示
            function showPreviewModal() {
              // 現在のキャンバスとアルバムリストのHTMLを取得
              const canvas = document.querySelector('.collection-canvas');
              const albumList = document.querySelector('.album-list');
              
              // モーダルのHTMLを作成
              const modalHTML = `
                <div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
                  <div class="modal-dialog" style="max-width: 1200px; width: 95%;">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="previewModalLabel">
                          <i class="fas fa-image me-2"></i>プレビュー
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body p-3" style="background: #000000;">
                        <div class="collection-container" style="margin: 0; background: #000000;">
                          <div class="main-content-area" style="gap: 20px; background: #000000;">
                            <div class="canvas-section">
                              <div class="canvas-wrapper">
                                <div class="collection-canvas" id="previewCanvas" style="width: 700px; height: 742px; background-color: #000000;">
                                  ${canvas.innerHTML}
                                </div>
                              </div>
                            </div>
                            <div class="ranking-section" style="min-width: 400px;">
                              <div class="ranking-container" style="height: 742px; background: #000000;">
                                <div class="album-list" id="previewAlbumList">
                                  ${albumList.innerHTML}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">閉じる</button>
                        <button type="button" class="btn btn-info me-2" onclick="captureScreenshot()">
                          <i class="fas fa-camera me-2"></i>スクリーンショット
                        </button>
                        <button type="button" class="btn btn-warning" onclick="shareWithImage()">
                          <i class="fas fa-image me-2"></i>画像付きシェア
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              `;

              // 既存のモーダルを削除
              const existingModal = document.getElementById('previewModal');
              if (existingModal) {
                existingModal.remove();
              }

              // 新しいモーダルを追加
              document.body.insertAdjacentHTML('beforeend', modalHTML);

              // モーダルを表示
              const modal = new bootstrap.Modal(document.getElementById('previewModal'));
              modal.show();
              
              // モーダル内の削除ボタンを非表示にする
              setTimeout(() => {
                const deleteButtons = document.querySelectorAll('#previewModal .delete-btn');
                deleteButtons.forEach(btn => {
                  btn.style.display = 'none';
                });
              }, 100);
            }

            // スクリーンショット機能
            function captureScreenshot() {
              const previewModal = document.getElementById('previewModal');
              if (!previewModal) {
                showMessage('プレビューモーダルが見つかりません', 'error');
                return;
              }

              // スクリーンショットボタンを無効化
              const screenshotBtn = event.target;
              const originalText = screenshotBtn.innerHTML;
              screenshotBtn.disabled = true;
              screenshotBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>撮影中...';

              // モーダルのbody部分（キャンバスとアルバムリスト）のみをスクリーンショット
              const modalBody = previewModal.querySelector('.modal-body');
              if (!modalBody) {
                showMessage('モーダルの内容が見つかりません', 'error');
                screenshotBtn.disabled = false;
                screenshotBtn.innerHTML = originalText;
                return;
              }

              html2canvas(modalBody, {
                backgroundColor: '#000000', // 黒背景に変更
                scale: 2, // 高解像度
                useCORS: true,
                allowTaint: true,
                logging: false,
                width: modalBody.scrollWidth,
                height: modalBody.scrollHeight
              }).then(canvas => {
                // 画像をダウンロード
                const link = document.createElement('a');
                link.download = `tunebox_preview_${new Date().getTime()}.png`;
                link.href = canvas.toDataURL();
                link.click();

                // Google Analytics イベント送信
                if (typeof Analytics !== 'undefined') {
                  Analytics.trackScreenshot();
                }

                // 成功メッセージを表示
                showMessage('スクリーンショットをダウンロードしました！', 'success');

                // ボタンを元に戻す
                screenshotBtn.disabled = false;
                screenshotBtn.innerHTML = originalText;
              }).catch(error => {
                console.error('Screenshot error:', error);
                showMessage('スクリーンショットの撮影に失敗しました', 'error');

                // ボタンを元に戻す
                screenshotBtn.disabled = false;
                screenshotBtn.innerHTML = originalText;
              });
            }

            // 画像生成機能（ダウンロード用）
            function generateShareImage() {
              const generateBtn = document.getElementById('generateImageBtn');

              // ボタンを無効化
              generateBtn.disabled = true;
              generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>ダウンロード中...';

              // 画像生成リクエストを送信
              fetch('/favorite_albums/generate_share_image', {
                method: 'GET',
                headers: {
                  'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
                }
              })
              .then(response => {
                if (!response.ok) {
                  throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.blob();
              })
              .then(blob => {
                // 画像をダウンロード
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `tunebox_share_${new Date().getTime()}.png`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                // 成功メッセージを表示
                showMessage('画像のダウンロードが完了しました！', 'success');

                // ボタンを元に戻す
                generateBtn.disabled = false;
                generateBtn.innerHTML = '<i class="fas fa-download me-2"></i>画像をダウンロード';
              })
              .catch(error => {
                console.error('Image generation error:', error);
                showMessage('画像生成に失敗しました', 'error');

                // ボタンを元に戻す
                generateBtn.disabled = false;
                generateBtn.innerHTML = '<i class="fas fa-download me-2"></i>画像をダウンロード';
              });
            }

            // SNS共有機能
            function shareToSNS() {
              // SNS共有モーダルを表示
              showSNSShareModal();
            }

            // 画像付きSNSシェア機能
            function shareWithImage() {
              const previewModal = document.getElementById('previewModal');
              if (!previewModal) {
                showMessage('プレビューモーダルが見つかりません', 'error');
                return;
              }

              // モーダルのbody部分（キャンバスとアルバムリスト）のみをスクリーンショット
              const modalBody = previewModal.querySelector('.modal-body');
              if (!modalBody) {
                showMessage('モーダルの内容が見つかりません', 'error');
                return;
              }

              // スクリーンショットを撮影してSNSシェア
              html2canvas(modalBody, {
                backgroundColor: '#000000', // 黒背景に変更
                scale: 2,
                useCORS: true,
                allowTaint: true,
                logging: false,
                width: modalBody.scrollWidth,
                height: modalBody.scrollHeight
              }).then(canvas => {
                // 画像をBlobに変換
                canvas.toBlob(blob => {
                  // 画像付きSNSシェアモーダルを表示
                  showImageShareModal(blob);
                }, 'image/png');
              }).catch(error => {
                console.error('Screenshot error:', error);
                showMessage('スクリーンショットの撮影に失敗しました', 'error');
              });
            }

            // 画像付きSNSシェアモーダルを表示
            function showImageShareModal(imageBlob) {
              const shareText = generateShareText();
              const shareUrl = window.location.href;
              
              // 画像のプレビューURLを作成
              const imageUrl = URL.createObjectURL(imageBlob);
              
              const modalHTML = `
                <div class="modal fade" id="imageShareModal" tabindex="-1" aria-labelledby="imageShareModalLabel" aria-hidden="true">
                  <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="imageShareModalLabel">
                          <i class="fas fa-image me-2"></i>画像付きSNSシェア
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <div class="row">
                          <div class="col-md-6">
                            <h6><i class="fas fa-image me-2"></i>シェア画像</h6>
                            <img src="${imageUrl}" class="img-fluid border rounded" alt="シェア画像">
                          </div>
                          <div class="col-md-6">
                            <h6><i class="fas fa-share-alt me-2"></i>シェア内容</h6>
                            <div class="alert alert-info">
                              <p class="mb-2"><strong>投稿内容:</strong></p>
                              <p class="mb-2">${shareText}</p>
                              <p class="mb-0"><small class="text-muted">URL: ${shareUrl}</small></p>
                            </div>
                            
                            <div class="d-grid gap-2">
                              <button type="button" class="btn btn-outline-primary" onclick="downloadAndShare('twitter', '${imageUrl}')">
                                <i class="fab fa-twitter me-2"></i>X (Twitter)でシェア
                              </button>
                              <button type="button" class="btn btn-outline-danger" onclick="downloadAndShare('instagram', '${imageUrl}')">
                                <i class="fab fa-instagram me-2"></i>Instagramでシェア
                              </button>
                              <button type="button" class="btn btn-outline-success" onclick="downloadAndShare('line', '${imageUrl}')">
                                <i class="fab fa-line me-2"></i>LINEでシェア
                              </button>
                              <button type="button" class="btn btn-outline-secondary" onclick="downloadImage('${imageUrl}')">
                                <i class="fas fa-download me-2"></i>画像をダウンロード
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">閉じる</button>
                      </div>
                    </div>
                  </div>
                </div>
              `;

              // 既存のモーダルを削除
              const existingModal = document.getElementById('imageShareModal');
              if (existingModal) {
                existingModal.remove();
              }

              // 新しいモーダルを追加
              document.body.insertAdjacentHTML('beforeend', modalHTML);

              // モーダルを表示
              const modal = new bootstrap.Modal(document.getElementById('imageShareModal'));
              modal.show();
            }

            // SNS共有モーダルを表示
            function showSNSShareModal() {
              const albumCount = document.querySelectorAll('.album-jacket').length;
              const shareText = generateShareText();
              const shareUrl = window.location.href;
              
              const modalHTML = `
                <div class="modal fade" id="snsShareModal" tabindex="-1" aria-labelledby="snsShareModalLabel" aria-hidden="true">
                  <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="snsShareModalLabel">
                          <i class="fas fa-share-alt me-2"></i>SNSでシェア
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <p class="text-muted mb-4">お気に入りのSNSで名盤リストをシェアしましょう！</p>
                        
                        <!-- シェア内容プレビュー -->
                        <div class="alert alert-info mb-4">
                          <h6><i class="fas fa-eye me-2"></i>シェア内容プレビュー</h6>
                          <div class="border rounded p-3 bg-light">
                            <p class="mb-2"><strong>投稿内容:</strong></p>
                            <p class="mb-2">${shareText}</p>
                            <p class="mb-0"><small class="text-muted">URL: ${shareUrl}</small></p>
                          </div>
                        </div>
                        
                        <div class="row g-3">
                          <div class="col-6">
                            <button type="button" class="btn btn-outline-primary w-100" onclick="shareToTwitter()">
                              <i class="fab fa-twitter me-2"></i>X (Twitter)
                            </button>
                          </div>
                          <div class="col-6">
                            <button type="button" class="btn btn-outline-danger w-100" onclick="shareToInstagram()">
                              <i class="fab fa-instagram me-2"></i>Instagram
                            </button>
                          </div>
                          <div class="col-6">
                            <button type="button" class="btn btn-outline-success w-100" onclick="shareToLine()">
                              <i class="fab fa-line me-2"></i>LINE
                            </button>
                          </div>
                          <div class="col-6">
                            <button type="button" class="btn btn-outline-secondary w-100" onclick="copyShareText()">
                              <i class="fas fa-copy me-2"></i>テキストコピー
                            </button>
                          </div>
                        </div>
                        
                        <div class="mt-4">
                          <label class="form-label">シェアテキスト</label>
                          <textarea class="form-control" id="shareTextArea" rows="3" readonly>${shareText}

${shareUrl}</textarea>
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">閉じる</button>
                      </div>
                    </div>
                  </div>
                </div>
              `;

              // 既存のモーダルを削除
              const existingModal = document.getElementById('snsShareModal');
              if (existingModal) {
                existingModal.remove();
              }

              // 新しいモーダルを追加
              document.body.insertAdjacentHTML('beforeend', modalHTML);

              // モーダルを表示
              const modal = new bootstrap.Modal(document.getElementById('snsShareModal'));
              modal.show();
            }

            // X (Twitter)でシェア
            function shareToTwitter() {
              const albumCount = document.querySelectorAll('.album-jacket').length;
              const text = `私の名盤リスト（${albumCount}枚）を作成しました！ #TuneBox #名盤リスト #音楽好きと繋がりたい`;
              const url = window.location.href;
              const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`;
              window.open(twitterUrl, '_blank', 'width=600,height=400');
              
              // モーダルを閉じる
              const modal = bootstrap.Modal.getInstance(document.getElementById('snsShareModal'));
              if (modal) modal.hide();
            }

            // Instagramでシェア
            function shareToInstagram() {
              const albumCount = document.querySelectorAll('.album-jacket').length;
              const text = `私の名盤リスト（${albumCount}枚）を作成しました！ #TuneBox #名盤リスト #音楽好きと繋がりたい`;
              const url = window.location.href;
              
              // モバイルの場合はInstagramアプリを開く
              if (navigator.userAgent.includes('Mobile')) {
                // Instagramアプリで開く（ただし、テキストの共有は制限がある）
                window.open('instagram://app', '_blank');
                showMessage('Instagramアプリが開きました。投稿テキストをコピーして使用してください。', 'info');
    } else {
                // デスクトップの場合はテキストをコピー
                navigator.clipboard.writeText(`${text}\n\n${url}`).then(() => {
                  showMessage('投稿テキストをクリップボードにコピーしました！Instagramで投稿してください。', 'success');
                }).catch(() => {
                  showMessage('テキストのコピーに失敗しました', 'error');
                });
              }
              
              // モーダルを閉じる
              const modal = bootstrap.Modal.getInstance(document.getElementById('snsShareModal'));
              if (modal) modal.hide();
            }

            // LINEでシェア
            function shareToLine() {
              const albumCount = document.querySelectorAll('.album-jacket').length;
              const text = `私の名盤リスト（${albumCount}枚）を作成しました！`;
              const url = window.location.href;
              const lineUrl = `https://line.me/R/msg/text/?${encodeURIComponent(text + '\n\n' + url)}`;
              window.open(lineUrl, '_blank');
              
              // モーダルを閉じる
              const modal = bootstrap.Modal.getInstance(document.getElementById('snsShareModal'));
              if (modal) modal.hide();
            }

            // シェアテキストをコピー
            function copyShareText() {
              const text = generateShareText() + "\n\n" + window.location.href;
              navigator.clipboard.writeText(text).then(() => {
                showMessage('シェアテキストをクリップボードにコピーしました！', 'success');
              }).catch(() => {
                showMessage('テキストのコピーに失敗しました', 'error');
              });
              
              // モーダルを閉じる
              const modal = bootstrap.Modal.getInstance(document.getElementById('snsShareModal'));
              if (modal) modal.hide();
            }

            // 画像ダウンロード機能
            function downloadImage(imageUrl) {
              const link = document.createElement('a');
              link.href = imageUrl;
              link.download = `tunebox_share_${new Date().getTime()}.png`;
              link.click();
              showMessage('画像をダウンロードしました！', 'success');
            }

            // 画像付きSNSシェア機能
            function downloadAndShare(platform, imageUrl) {
              // 画像をダウンロード
              downloadImage(imageUrl);
              
              // プラットフォーム別のシェア処理
              const shareText = generateShareText();
              const shareUrl = window.location.href;
              
              switch(platform) {
                case 'twitter':
                  const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`;
                  window.open(twitterUrl, '_blank', 'width=600,height=400');
                  showMessage('画像をダウンロードしました。X (Twitter)で画像を添付して投稿してください。', 'info');
                  break;
                case 'instagram':
                  if (navigator.userAgent.includes('Mobile')) {
                    window.open('instagram://app', '_blank');
                    showMessage('画像をダウンロードしました。Instagramアプリで画像を添付して投稿してください。', 'info');
                  } else {
                    navigator.clipboard.writeText(`${shareText}\n\n${shareUrl}`).then(() => {
                      showMessage('画像をダウンロードしました。Instagramで画像を添付して投稿してください。', 'info');
                    });
                  }
                  break;
                case 'line':
                  const lineUrl = `https://line.me/R/msg/text/?${encodeURIComponent(shareText + '\n\n' + shareUrl)}`;
                  window.open(lineUrl, '_blank');
                  showMessage('画像をダウンロードしました。LINEで画像を添付して投稿してください。', 'info');
                  break;
              }
              
              // モーダルを閉じる
              const modal = bootstrap.Modal.getInstance(document.getElementById('imageShareModal'));
              if (modal) modal.hide();
            }

// 一括削除機能
function showBulkDeleteModal() {
  const modal = new bootstrap.Modal(document.getElementById('bulkDeleteModal'));
  modal.show();
}

function executeBulkDelete() {
  const albums = document.querySelectorAll('.album-jacket');
  const totalCount = albums.length;
  
  if (totalCount === 0) {
    showMessage('削除するアルバムがありません', 'info');
    return;
  }
  
  const modal = bootstrap.Modal.getInstance(document.getElementById('bulkDeleteModal'));
  modal.hide();
  
  showBulkDeleteProgress(totalCount);
  performBulkDelete(albums);
}

function showBulkDeleteProgress(totalCount) {
  const progressHtml = `
    <div class="bulk-delete-progress" id="bulkDeleteProgress">
      <div class="mb-3">
        <i class="fas fa-trash fa-2x text-danger"></i>
      </div>
      <h6 class="fw-bold mb-3">アルバムを一括削除中...</h6>
      <div class="progress mb-3" style="height: 10px;">
        <div class="progress-bar bg-danger" role="progressbar" style="width: 0%" id="deleteProgressBar"></div>
      </div>
      <p class="mb-0">
        <span id="deleteCount">0</span> / <span id="deleteTotalCount">${totalCount}</span> 完了
      </p>
      <small class="text-muted">すべてのアルバムが一気に削除されます</small>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', progressHtml);
}

async function performBulkDelete(albums) {
  const totalCount = albums.length;
  
  if (totalCount === 0) {
    showMessage('削除するアルバムがありません', 'info');
    return;
  }
  
  try {
    // すべてのアルバムを一気に削除
    const response = await fetch('/favorite_albums/bulk_destroy', {
        method: 'DELETE',
        headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content'),
        'Content-Type': 'application/json'
        }
      });
      
      const data = await response.json();
      
    if (data.status === 'success') {
      // すべてのアルバムを一気に非表示にする
      albums.forEach(album => {
        album.classList.add('deleting');
        setTimeout(() => {
          if (album.parentNode) {
            album.remove();
          }
        }, 300);
      });
      
      // アルバムリストも一気に非表示にする
      const albumListItems = document.querySelectorAll('.album-list-item');
      albumListItems.forEach(item => {
        item.classList.add('deleting');
        setTimeout(() => {
          if (item.parentNode) {
            item.remove();
          }
        }, 300);
      });
      
      // プログレスバーを一気に100%にする
      updateBulkDeleteProgress(totalCount, totalCount);
  
  setTimeout(() => {
    hideBulkDeleteProgress();
        showMessage(`${totalCount}枚のアルバムを削除しました`, 'success');
    
        // ページをリロードして空の状態を表示
    setTimeout(() => {
      window.location.reload();
  }, 1000);
      }, 500);
      
    } else {
      throw new Error(data.message || '削除に失敗しました');
    }
    
  } catch (error) {
    console.error('Bulk delete error:', error);
    hideBulkDeleteProgress();
    showMessage('一括削除に失敗しました', 'error');
  }
}

function updateBulkDeleteProgress(current, total) {
  const progressBar = document.getElementById('deleteProgressBar');
  const countElement = document.getElementById('deleteCount');
  
  if (progressBar && countElement) {
    const percentage = (current / total) * 100;
    progressBar.style.width = percentage + '%';
    countElement.textContent = current;
  }
}

function hideBulkDeleteProgress() {
  const progress = document.getElementById('bulkDeleteProgress');
  if (progress) {
    progress.style.opacity = '0';
    setTimeout(() => {
      if (progress.parentNode) {
        progress.parentNode.removeChild(progress);
      }
    }, 300);
  }
}

// コレクションを保存
function saveCollection() {
  // 将来的なマイページ機能用のプレースホルダー
  showMessage('コレクションがマイページに保存されました！', 'success');
}

// メッセージ表示
function showMessage(message, type) {
  const alertClass = type === 'error' ? 'alert-danger' : type === 'info' ? 'alert-info' : 'alert-success';
  const alertHtml = `
    <div class="alert ${alertClass} alert-dismissible fade show position-fixed"
         style="top: 20px; right: 20px; z-index: 9999;" role="alert">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  `;

  document.body.insertAdjacentHTML('beforeend', alertHtml);

  setTimeout(() => {
    const alert = document.querySelector('.alert');
    if (alert) alert.remove();
  }, 3000);
}
</script>