<div class="container mt-4">
  <h1> アルバム検索</h1>

  <!-- 検索フォーム -->
  <%= form_with url: albums_index_path, method: :get, local: true, class: "mb-4" do |form| %>
    <div class="input-group">
      <%= form.text_field :search,
          value: @search_query,
          placeholder: "アーティスト名やアルバム名で検索...",
          class: "form-control form-control-lg" %>
      <%= form.submit "検索", class: "btn btn-primary btn-lg" %>
    </div>
  <% end %>

  <!-- お気に入り数表示 -->
  <div class="alert alert-info d-flex justify-content-between align-items-center" id="favorite-status">
    <span>現在のお気に入り: <span id="favorite-counter">読み込み中...</span> / 25</span>
    <%= link_to "コレクションを見る", favorite_albums_path, class: "btn btn-sm btn-outline-primary" %>
  </div>

  <!-- 検索結果の統計 -->
  <% if @albums.any? %>
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h3>検索結果</h3>
      <span class="badge bg-primary fs-6">
        全 <%= @total_albums %> 件中
        <%= (@page - 1) * 20 + 1 %>-<%= [@page * 20, @total_albums].min %> 件目
      </span>
    </div>

    <!-- アルバム一覧 -->
    <div class="row">
      <% @albums.each do |album| %>
        <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
          <div class="card h-100 hover-card position-relative">
            <% if album[:image_url] %>
              <img src="<%= album[:image_url] %>" class="card-img-top" alt="<%= album[:name] %>" style="height: 250px; object-fit: cover;">
            <% else %>
              <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 250px;">
                <i class="fas fa-music fa-3x text-muted"></i>
              </div>
            <% end %>

            <!-- 🆕 修正されたお気に入りボタン -->
            <div class="position-absolute top-0 end-0 p-2" style="z-index: 10;">
             <button class="btn btn-outline-success btn-sm add-btn"
               data-spotify-id="<%= album[:spotify_id] %>"
               data-name="<%= album[:name] %>"
               data-artist="<%= album[:artist] %>"
               data-image-url="<%= album[:image_url] %>"
               data-external-url="<%= album[:external_url] %>"
               data-release-date="<%= album[:release_date] %>"
               data-total-tracks="<%= album[:total_tracks] %>"
               onclick="addToFavorites(this)"
               style="border-radius: 8px; width: 40px; height: 40px; backdrop-filter: blur(5px); background: rgba(255,255,255,0.9); position: relative; z-index: 11;">
              <i class="fas fa-plus"></i>
             </button>
            </div>

            <div class="card-body d-flex flex-column">
              <h6 class="card-title"><%= album[:name] %></h6>
              <p class="card-text small text-muted mb-2"><%= album[:artist] %></p>
              <p class="card-text small text-muted mb-2">
                <i class="fas fa-calendar me-1"></i><%= album[:release_date] %>
              </p>
              <p class="card-text small text-muted mb-3">
                <i class="fas fa-music me-1"></i><%= album[:total_tracks] %> 曲
              </p>
              <div class="mt-auto">
                <a href="<%= album[:external_url] %>" target="_blank" class="btn btn-success btn-sm w-100">
                  <i class="fab fa-spotify me-1"></i>Spotifyで聴く
                </a>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>

    <!-- ページネーション -->
    <% if @total_pages > 1 %>
      <nav aria-label="検索結果ページネーション" class="mt-5">
        <ul class="pagination justify-content-center">
          <!-- 前のページ -->
          <% if @page > 1 %>
            <li class="page-item">
              <%= link_to albums_index_path(search: @search_query, page: @page - 1), class: "page-link" do %>
                <i class="fas fa-chevron-left"></i> 前へ
              <% end %>
            </li>
          <% else %>
            <li class="page-item disabled">
              <span class="page-link"><i class="fas fa-chevron-left"></i> 前へ</span>
            </li>
          <% end %>

          <!-- ページ番号 -->
          <%
            start_page = [@page - 2, 1].max
            end_page = [start_page + 4, @total_pages].min
            start_page = [end_page - 4, 1].max if end_page - start_page < 4
          %>

          <% if start_page > 1 %>
            <li class="page-item">
              <%= link_to "1", albums_index_path(search: @search_query, page: 1), class: "page-link" %>
            </li>
            <% if start_page > 2 %>
              <li class="page-item disabled"><span class="page-link">...</span></li>
            <% end %>
          <% end %>

          <% (start_page..end_page).each do |page_num| %>
            <li class="page-item <%= 'active' if page_num == @page %>">
              <%= link_to page_num, albums_index_path(search: @search_query, page: page_num), class: "page-link" %>
            </li>
          <% end %>

          <% if end_page < @total_pages %>
            <% if end_page < @total_pages - 1 %>
              <li class="page-item disabled"><span class="page-link">...</span></li>
            <% end %>
            <li class="page-item">
              <%= link_to @total_pages, albums_index_path(search: @search_query, page: @total_pages), class: "page-link" %>
            </li>
          <% end %>

          <!-- 次のページ -->
          <% if @page < @total_pages %>
            <li class="page-item">
              <%= link_to albums_index_path(search: @search_query, page: @page + 1), class: "page-link" do %>
                次へ <i class="fas fa-chevron-right"></i>
              <% end %>
            </li>
          <% else %>
            <li class="page-item disabled">
              <span class="page-link">次へ <i class="fas fa-chevron-right"></i></span>
            </li>
          <% end %>
        </ul>
      </nav>

      <!-- ページ情報 -->
      <div class="text-center text-muted mt-3">
        <small>
          ページ <%= @page %> / <%= @total_pages %>
          (全 <%= @total_albums %> 件のアルバム)
        </small>
      </div>
    <% end %>

  <% elsif @search_query.present? %>
    <div class="alert alert-warning">
      <i class="fas fa-search me-2"></i>
      「<%= @search_query %>」の検索結果が見つかりませんでした。
    </div>
  <% else %>
    <div class="text-center text-muted mt-5">
      <i class="fas fa-search fa-3x mb-3"></i>
      <p>アーティスト名やアルバム名を入力して検索してください</p>
    </div>
  <% end %>
</div>

<script>
// 🆕 検索ページ用のJavaScript
let currentFavoriteCount = 0;

document.addEventListener('DOMContentLoaded', function() {
  console.log('🔧 Initializing search page...');
  
  // お気に入り数を読み込み
  loadFavoriteCount();
  
  // 既存のお気に入りを確認
  checkExistingFavorites();
});

// 🆕 お気に入り数を読み込む
function loadFavoriteCount() {
  console.log('📊 Loading favorite count...');
  
  fetch('/favorite_albums.json', {
    headers: {
      'Accept': 'application/json',
      'X-CSRF-Token': getCSRFToken()
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    currentFavoriteCount = data.length;
    updateFavoriteCounter();
    console.log('✅ Current favorite count:', currentFavoriteCount);
  })
  .catch(error => {
    console.error('❌ Error loading favorites:', error);
    document.getElementById('favorite-counter').textContent = 'エラー';
  });
}

// 🆕 お気に入り数表示を更新
function updateFavoriteCounter() {
  const counter = document.getElementById('favorite-counter');
  if (counter) {
    counter.textContent = currentFavoriteCount;
    
    // 上限に近づいた時の警告表示
    const status = document.getElementById('favorite-status');
    if (currentFavoriteCount >= 25) {
      status.classList.remove('alert-info');
      status.classList.add('alert-danger');
    } else if (currentFavoriteCount >= 20) {
      status.classList.remove('alert-info');
      status.classList.add('alert-warning');
    } else {
      status.classList.remove('alert-warning', 'alert-danger');
      status.classList.add('alert-info');
    }
  }
}

// 🆕 既存のお気に入りをチェックして表示を更新
function checkExistingFavorites() {
  fetch('/favorite_albums.json', {
    headers: {
      'Accept': 'application/json',
      'X-CSRF-Token': getCSRFToken()
    }
  })
  .then(response => response.json())
  .then(favorites => {
    const favoriteIds = new Set(favorites.map(fav => fav.spotify_id));
    
    // 各アルバムのボタン状態を更新
    document.querySelectorAll('.add-btn').forEach(btn => {
      const spotifyId = btn.dataset.spotifyId;
      if (favoriteIds.has(spotifyId)) {
        updateButtonToRemove(btn);
      }
    });
  })
  .catch(error => {
    console.error('❌ Error checking favorites:', error);
  });
}

// 🆕 お気に入り追加/削除のメイン関数
function addToFavorites(button) {
  console.log('🎯 Add to favorites clicked');
  
  const isCurrentlyFavorite = button.classList.contains('btn-danger');
  const spotifyId = button.dataset.spotifyId;
  
  if (isCurrentlyFavorite) {
    // 削除処理
    removeFavorite(button, spotifyId);
  } else {
    // 追加処理
    addFavorite(button);
  }
}

// 🆕 お気に入り追加処理
function addFavorite(button) {
  // 上限チェック
  if (currentFavoriteCount >= 25) {
    showMessage('お気に入りは最大25個までです', 'error');
    return;
  }
  
  // ボタンの状態を一時的に無効化
  button.disabled = true;
  const originalContent = button.innerHTML;
  button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
  
  const albumData = {
    spotify_id: button.dataset.spotifyId,
    name: button.dataset.name,
    artist: button.dataset.artist,
    image_url: button.dataset.imageUrl,
    external_url: button.dataset.externalUrl,
    release_date: button.dataset.releaseDate,
    total_tracks: parseInt(button.dataset.totalTracks)
  };
  
  console.log('📤 Adding album to favorites:', albumData);
  
  fetch('/favorite_albums/toggle', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': getCSRFToken(),
      'Accept': 'application/json'
    },
    body: JSON.stringify({
      favorite_album: albumData
    })
  })
  .then(response => {
    console.log('📥 Response status:', response.status);
    
    if (!response.ok) {
      return response.text().then(text => {
        console.error('❌ Response text:', text);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      });
    }
    return response.json();
  })
  .then(data => {
    console.log('✅ Add response:', data);
    
    button.disabled = false;
    
    if (data.status === 'added') {
      currentFavoriteCount = data.current_count;
      updateFavoriteCounter();
      updateButtonToRemove(button);
      showMessage(`「${albumData.name}」をコレクションに追加しました！`, 'success');
    } else if (data.status === 'guest_mode') {
      button.innerHTML = originalContent;
      showMessage(data.message, 'info');
    } else if (data.status === 'error') {
      button.innerHTML = originalContent;
      showMessage(data.message || 'エラーが発生しました', 'error');
    }
  })
  .catch(error => {
    console.error('❌ Add error:', error);
    button.disabled = false;
    button.innerHTML = originalContent;
    showMessage('追加中にエラーが発生しました: ' + error.message, 'error');
  });
}

// 🆕 お気に入り削除処理
function removeFavorite(button, spotifyId) {
  // ボタンの状態を一時的に無効化
  button.disabled = true;
  const originalContent = button.innerHTML;
  button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
  
  console.log('🗑️ Removing album from favorites:', spotifyId);
  
  fetch(`/favorite_albums/${spotifyId}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': getCSRFToken(),
      'Accept': 'application/json'
    }
  })
  .then(response => {
    console.log('📥 Delete response status:', response.status);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
  })
  .then(data => {
    console.log('✅ Remove response:', data);
    
    button.disabled = false;
    
    if (data.status === 'removed') {
      currentFavoriteCount = Math.max(0, currentFavoriteCount - 1);
      updateFavoriteCounter();
      updateButtonToAdd(button);
      showMessage('コレクションから削除しました', 'success');
    }
  })
  .catch(error => {
    console.error('❌ Remove error:', error);
    button.disabled = false;
    button.innerHTML = originalContent;
    showMessage('削除中にエラーが発生しました: ' + error.message, 'error');
  });
}

// 🆕 ボタンを削除状態に更新
function updateButtonToRemove(button) {
  button.classList.remove('btn-outline-success');
  button.classList.add('btn-danger');
  button.innerHTML = '<i class="fas fa-check"></i>';
  button.title = 'コレクションから削除';
}

// 🆕 ボタンを追加状態に更新
function updateButtonToAdd(button) {
  button.classList.remove('btn-danger');
  button.classList.add('btn-outline-success');
  button.innerHTML = '<i class="fas fa-plus"></i>';
  button.title = 'コレクションに追加';
}

// 🆕 CSRFトークンを取得
function getCSRFToken() {
  const token = document.querySelector('[name="csrf-token"]')?.getAttribute('content') || 
               document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
  
  if (!token) {
    console.error('❌ CSRF token not found');
  }
  
  return token;
}

// 🆕 メッセージ表示機能
function showMessage(message, type = 'info') {
  console.log(`💬 Message (${type}):`, message);
  
  // 既存のアラートを削除
  const existingAlert = document.querySelector('.custom-alert');
  if (existingAlert) {
    existingAlert.remove();
  }
  
  const alertClass = type === 'error' ? 'alert-danger' : 
                    type === 'success' ? 'alert-success' : 'alert-info';
  
  const alertHtml = `
    <div class="alert ${alertClass} alert-dismissible fade show position-fixed custom-alert"
         style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;" role="alert">
        <div class="d-flex align-items-center">
          <i class="fas fa-${type === 'error' ? 'exclamation-circle' : type === 'success' ? 'check-circle' : 'info-circle'} me-2"></i>
          <span>${message}</span>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  `;

  document.body.insertAdjacentHTML('beforeend', alertHtml);

  // 自動で消去
  setTimeout(() => {
    const alert = document.querySelector('.custom-alert');
    if (alert) {
      alert.classList.remove('show');
      setTimeout(() => {
        if (alert.parentNode) {
          alert.remove();
        }
      }, 150);
    }
  }, 4000);
}


</script>

<style>
/* 🆕 検索ページ用の追加スタイル */
.hover-card {
  transition: all 0.3s ease;
  border: 1px solid #dee2e6;
}

.hover-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  border-color: #667eea;
}

.add-btn {
  transition: all 0.3s ease;
  border: 2px solid currentColor !important;
}

.add-btn:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}

.add-btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  transform: none !important;
}

.custom-alert {
  animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

/* ボタンの状態別スタイル */
.btn-outline-success.add-btn {
  color: #198754;
  border-color: #198754;
  background: rgba(255,255,255,0.9);
}

.btn-outline-success.add-btn:hover {
  color: white;
  background: #198754;
  border-color: #198754;
}

.btn-danger.add-btn {
  color: white;
  background: #dc3545;
  border-color: #dc3545;
}

.btn-danger.add-btn:hover {
  background: #c82333;
  border-color: #bd2130;
}

/* お気に入り数の警告表示 */
#favorite-status.alert-warning {
  border-color: #ffc107;
  background-color: #fff3cd;
  color: #856404;
}

#favorite-status.alert-danger {
  border-color: #dc3545;
  background-color: #f8d7da;
  color: #721c24;
}
</style>